#!/usr/bin/env python3

# Associate numbers with their combining diacritics (the 8th tone has no diacritic)
diacritics = {
    '1': chr(0x304), # High tone (macron)
    '2': chr(0x301), # Rising tone (acute)
    '3': chr(0x30C), # Falling-rising tone (caron)
    '4': chr(0x309), # Falling tone (diacritical hook)
    '5': chr(0x302), # Rising-falling tone (cirxumflex)
    '6': chr(0x300), # Low tone (grave accent)
    '7': chr(0x303), # Creaky rising tone (diacritical tilde)
}

# Create the script for a given ending and tone
# (tone number should be passed as a string)
def create_script_file(path, consonant, ending, tone):
    out_file = open(path+consonant+ending+tone+".py","w+")   # Create file
    template = open(path + "script_template.txt", "r")       # Open template    

    for line in template:                                    # Copy template
        out_file.write(line.rstrip() + '\n') 
        
    out_file.write("paste_character(\'")                     # Copy operational line
    out_file.write(consonant)                                # (Consonant)
    out_file.write(ending[0]+diacritics[tone] + ending[1:])  # (Ending with diacritic)
    out_file.write("\')")

    out_file.close()                                         # Close file
    template.close()                                         # Close template

# Create the json abbreviation file for a given ending and tone
# (tone number should be passed as a string)
def create_json_file(path, consonant, ending, tone):
    abbrev = consonant + ending + tone
    out_file = open(path+"." + abbrev + ".json", "w+")       # Create file
    template = open(path + "abbreviation_template.txt")      # Open template

    for line in template:                                    # Copy template
        line = line.replace("-", abbrev)                     # (Fill in paramaters)
        out_file.write(line)

    out_file.close()                                         # Close file
    template.close()                                         # Close template

# Compile a list of all consonants and all endings

consonants_file = open("./consonants.txt", "r")
consonants = []
for line in consonants_file:
    con = line.strip()
    consonants.append(con)
    consonants.append(con[0].upper() + con[1:])
consonants_file.close()
#consonants = [''] # (Comment out this line to generate all roots)

endings_file = open("./endings.txt", "r")
endings = []
for line in endings_file:
    end = line.strip()
    endings.append(end)
endings_file.close()

# Create a script file and an abbreviation file for each Toaq root

for consonant in consonants:
    for ending in endings:
        print(consonant + ending)
        for tone in range(1, 8):
            create_script_file("./", consonant, ending, str(tone))
            create_json_file("./", consonant, ending, str(tone))