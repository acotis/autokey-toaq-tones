#!/usr/bin/env python3

import sys, getopt


# IDEAS I HAVE ALREADY HAD 
#
#   1. I can't use just endings instead of whole words because
#      then typing "toaq4" yields "toảq" instead of "tỏaq".
#
#   2. I can't use full letter-with-diacritic unicode characters
#      in place of combining diacritics because then it would
#      not work with capital letters.

# Associate numbers with their combining diacritics (the 8th tone has no diacritic)

diacritics = {
    'a': ".āáǎảâàãa",
    'e': ".ēéěẻêèẽe",
    'i': ".īíǐỉîìĩı",
    'o': ".ōóǒỏôòõo",
    'u': ".ūúǔủûùũu",
    'm': ".m̄ḿm̌m̉m̂m̀m̃m", # (The 'm' and 'M' lines only use
    'M': ".M̄ḾM̌M̉M̂M̀M̃M", #  decomposed characters)
}

dotless_i = True  # Options configurable through commandline args
dotless_j = True


# Create the trigger text and formatted output
# for a given word on a given tone

def create_trigger_name(consonant, ending, tone):
    return consonant + ending + str(tone)

def create_marked_word(consonant, ending, tone):
    markings = diacritics[ending[0]]           # Get all marked vowels
    marked_vowel = markings[int(tone)]         # Choose correct marking
    marked_ending = marked_vowel + ending[1:]  # Build marked ending
    word = consonant + marked_ending           # Add onset

    if dotless_i:                              # Dotless ı and ȷ
        word = word.replace("i", "ı")
    if dotless_j:
        word = word.replace("j", "ȷ") 

    return word

# Create from a template an AutoKey script with
# a given shortcut and output

def create_script_file(path, trigger, output):
    out_file = open(trigger + ".py","w+")
    template = open(path + "script_template.txt", "r")

    for line in template:
        out_file.write(line.rstrip() + '\n')

    out_file.write("paste_character(\'" + output + "\')")

    out_file.close()
    template.close()

# Create the json file to link a given trigger
# to its program

def create_json_file(path, trigger):
    out_file = open(path+"." + trigger + ".json", "w+")
    template = open(path + "abbreviation_template.txt")

    for line in template:
        line = line.replace("-", trigger)
        out_file.write(line)

    out_file.close()
    template.close()

# Create a trigger and corresponding AutoKey link

def create_and_link(path, trigger, output):
    create_script_file(path, trigger, output)
    create_json_file(path, trigger)


# Deal with command-line arguments
# (Code basically copied from online page about getopt)

try:
    opts, args = getopt.getopt(sys.argv[1:], "hij")
except getopt.GetoptError:
    print("usage: generator [-i] [-j] [-h]")
    sys.exit(2)

for opt, arg in opts:
    if opt == '-h':
        print("usage: generator [-i] [-j] [-h]")
        sys.exit()
    elif opt == '-i':
        dotless_i = False
    elif opt == '-j':
        dotless_j = False
    else:
        print("usage: generator [-i] [-j] [-h]")
        sys.exit(2)

# Print chosen options

print("Dotless-i: " + ("on" if dotless_i else "off"))
print("Dotless-j: " + ("on" if dotless_j else "off"))

        
# Read in consonants from the consonant file

consonants_file = open("./consonants.txt", "r")
consonants = []
for line in consonants_file:
    con = line.strip()
    consonants.append(con)
    consonants.append(con[0].upper() + con[1:])
consonants_file.close()

# Read in endings from the ending file

endings_file = open("./endings.txt", "r")
endings = []
for line in endings_file:
    end = line.strip()
    endings.append(end)
endings_file.close()

# Create and link a trigger for each Toaq word on each tone

for consonant in consonants:
    for ending in endings:
        for tone in range(1, 9): # 8th tone to make dotless-i
            trigger = create_trigger_name(consonant, ending,tone)
            output = create_marked_word(consonant, ending, tone)
            create_and_link("./", trigger, output)

# Create and link a trigger for the tonal m's
# (Stored in non-o

for tone in range(1, 9):
    mtone = diacritics['m'][2*tone - 1 : 2*tone + 1]
    Mtone = diacritics['M'][2*tone - 1 : 2*tone + 1]
    create_and_link("./", "m" + str(tone), mtone)
    create_and_link("./", "M" + str(tone), Mtone)
            
# Create and link a trigger for the angle-bracket quotations

create_and_link("./", "<<", "«")
create_and_link("./", ">>", "»")