#!/usr/bin/env python3

import sys, getopt


# IDEAS I HAVE ALREADY HAD 
#
#   1. I can't use just endings instead of whole words because
#      then typing "toaq4" yields "toảq" instead of "tỏaq".
#
#   2. I can't use full letter-with-diacritic unicode characters
#      in place of combining diacritics because then it would
#      not work with capital letters.

# Associate numbers with their combining diacritics (the 8th tone has no diacritic)

diacritics = {
    'a': ".āáǎảâàãa",
    'e': ".ēéěẻêèẽe",
    'i': ".īíǐỉîìĩı",
    'o': ".ōóǒỏôòõo",
    'u': ".ūúǔủûùũu",
}

dotless_i = True  # Options configurable through commandline args
dotless_j = True

# Create the script for a given ending and tone
# (tone number should be passed as a string)

def create_script_file(path, consonant, ending, tone):
    out_file = open(path+consonant+ending+tone+".py","w+")   # Create file
    template = open(path + "script_template.txt", "r")       # Open template    

    for line in template:                                    # Copy template
        out_file.write(line.rstrip() + '\n') 

    markings = diacritics[ending[0]]                         # Build printable word
    marked_vowel = markings[int(tone)]
    marked_ending = marked_vowel + ending[1:]
    word = consonant + marked_ending

    if dotless_i:                                            # Dotless ı and ȷ
        word = word.replace("i", "ı")
    if dotless_j:
        word = word.replace("j", "ȷ") 
    
    out_file.write("paste_character(\'" + word + "\')")      # Copy operational line

    out_file.close()                                         # Close file
    template.close()                                         # Close template

# Create the json abbreviation file for a given ending and tone
# (tone number should be passed as a string)

def create_json_file(path, consonant, ending, tone):
    abbrev = consonant + ending + tone
    out_file = open(path+"." + abbrev + ".json", "w+")       # Create file
    template = open(path + "abbreviation_template.txt")      # Open template

    for line in template:                                    # Copy template
        line = line.replace("-", abbrev)                     # (Fill in paramaters)
        out_file.write(line)

    out_file.close()                                         # Close file
    template.close()                                         # Close template



# Deal with command-line arguments
# (Code basically copied from online page about getopt)

try:
    opts, args = getopt.getopt(sys.argv[1:], "hij")
except getopt.GetoptError:
    print("usage: generator [-i] [-j] [-h]")
    sys.exit(2)

for opt, arg in opts:
    if opt == '-h':
        print("usage: generator [-i] [-j] [-h]")
        sys.exit()
    elif opt == '-i':
        dotless_i = False
    elif opt == '-j':
        dotless_j = False
    else:
        print("usage: generator [-i] [-j] [-h]")
        sys.exit(2)

        
# Compile a list of all consonants and all endings

consonants_file = open("./consonants.txt", "r")
consonants = []
for line in consonants_file:
    con = line.strip()
    consonants.append(con)
    consonants.append(con[0].upper() + con[1:])
consonants_file.close()

endings_file = open("./endings.txt", "r")
endings = []
for line in endings_file:
    end = line.strip()
    endings.append(end)
endings_file.close()

# Create a script file and an abbrev file for each Toaq root

for consonant in consonants:
    for ending in endings:
        print(consonant + ending)
        for tone in range(1, 9): # 8th tone to make dotless-i
            create_script_file("./", consonant, ending,str(tone))
            create_json_file("./", consonant, ending, str(tone))